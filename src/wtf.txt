class RSA():
    def __init__(self):
        self.p = 0
        self.q = 0
        self.n = 0
        self.phi = 0
        self.e = 0
        self.d = 0
        self.public_key = 0
        self.private_key = 0

    def is_prime(self, num):
        '''
        Check if a number is prime
        '''
        if num == 2:
            return True
        if num < 2 or num % 2 == 0:
            return False
        for n in range(3, int(num**0.5)+2, 2):
            if num % n == 0:
                return False
        return True

    def gcd(self, a, b):
        '''
        Calculate the Greatest Common Divisor of a and b.
        Unless b==0, the result will have the same sign as b (so that when
        b is divided by it, the result comes out positive).
        The algorithm is Stein's algorithm.
        '''
        while b != 0:
            a, b = b, a % b
        return a

    def multiplicative_inverse(self, a, b):
        '''
        Find the multiplicative inverse of a in modulo b.
        '''
        if self.gcd(a, b) != 1:
            return None
        u1, u2, u3 = 1, 0, a
        v1, v2, v3 = 0, 1, b
        while v3 != 0:
            q = u3 // v3  # // is the integer division operator
            v1, v2, v3, u1, u2, u3 = (u1 - q * v1), \
                                     (u2 - q * v2), \
                                     (u3 - q * v3), \
                v1, \
                v2, \
                v3
        return u1 % b

    def generate_key_pair(self, p, q):
        if not (self.is_prime(p) and self.is_prime(q)):
            raise ValueError('Both numbers must be prime.')
        elif p == q:
            raise ValueError('p and q cannot be equal')
        # n = pq
        self.n = p * q

        # Phi is the totient of n
        self.phi = (p-1) * (q-1)

        # Choose an integer e such that e and phi(n) are coprime
        self.e = random.randrange(1, self.phi)

        # Use Euclid's Algorithm to verify that e and phi(n) are coprime
        g = self.gcd(self.e, self.phi)

        while g != 1:
            self.e = random.randrange(1, self.phi)
            g = self.gcd(self.e, self.phi)

        # Use Extended Euclid's Algorithm to generate the private key
        self.d = self.multiplicative_inverse(self.e, self.phi)

        # Return public and private keypair
        # Public key is (e, n) and private key is (d, n)
        self.public_key = (self.e, self.n)
        self.private_key = (self.d, self.n)

    def encrypt(self, private_key, plaintext):
        # Unpack the key into it's components
        key, n = private_key
        # Convert each letter in the plaintext to numbers based on the character using a^b mod m
        cipher = [(ord(char) ** key) % n for char in plaintext]
        # Return the array of bytes
        return cipher

    def decrypt(self, public_key, ciphertext):
        # Unpack the key into its components
        key, n = public_key
        # Generate the plaintext based on the ciphertext and key using a^b mod m
        plain = [chr((char ** key) % n) for char in ciphertext]
        # Return the array of bytes as a string
        return ''.join(plain)

    def encrypt_file(self, file_name):
        input = Input(file_name, 1, 1, 2020, "plaintext")
        print(input.file_data)
        output = Output("plaintext")
        output.store(input.file_data)

    def decrypt_file(self, file_name):
        input = Input(file_name, 1, 1, 2020, "ciphertext")
        print(input.file_data)
        output = Output("ciphertext")
        output.store(input.file_data)

    def encrypt_string(self, string):
        return self.encrypt(self.private_key, string)

    def decrypt_string(self, string):
        return self.decrypt(self.public_key, string)

    def test(self):
        self.p = 17
        self.q = 19
        self.generate_key_pair(self.p, self.q)
        print("Public key: ", self.public_key)
        print("Private key: ", self.private_key)
        string = "Hello World"
        print("Original string: ", string)
        encrypted_string = self.encrypt_string(string)
        print("Encrypted string: ", encrypted_string)
        decrypted_string = self.decrypt_string(encrypted_string)
        print("Decrypted string: ", decrypted_string)
        self.encrypt_file("tess.txt")
        self.decrypt_file("tess.txt")
        return True

    def run(self):
        print("===========================================================================================================")
        print("================================== RSA Encryptor / Decrypter ==============================================")
        print(" ")
        self.p = int(input(" - Enter a prime number (17, 19, 23, etc): "))
        self.q = int(
            input(" - Enter another prime number (Not one you entered above): "))
        print(" ")
        print("Generating your public/private keypairs now . . .")
        self.generate_key_pair(self.p, self.q)
        print("Your public key is ", self.public_key,
              " and your private key is ", self.private_key)
        print(" ")
        message = input("Enter a message to encrypt with your private key: ")
        encrypted_msg = self.encrypt_string(message)
        print("Your encrypted message is: ")
        print(''.join(map(lambda x: str(x), encrypted_msg)))
        print(" ")
        print("Decrypting message with public key ", self.public_key, " . . .")
        print("Your message is:")
        print(self.decrypt_string(encrypted_msg))
        print(" ")
        print("===========================================================================================================")
        print("================================== RSA Encryptor / Decrypter ==============================================")
        print(" ")
        return True

    def run_file(self):
        print("===========================================================================================================")
        print("================================== RSA Encryptor / Decrypter ==============================================")
        print(" ")
        self.p = int(input(" - Enter a prime number (17, 19, 23, etc): "))
        self.q = int(
            input(" - Enter another prime number (Not one you entered above): "))
        print(" ")
        print("Generating your public/private keypairs now . . .")
        self.generate_key_pair(self.p, self.q)
        print("Your public key is ", self.public_key,
              " and your private key is ", self.private_key)
        print(" ")
        file_name = input(
            "Enter a file name to encrypt with your private key: ")
        self.encrypt_file(file_name)
        print(" ")
        print("Decrypting message with public key ", self.public_key, " . . .")
        print("Your message is:")
        self.decrypt_file(file_name)
        print(" ")
        print("===========================================================================================================")
        print("================================== RSA Encryptor / Decrypter ==============================================")
        print(" ")
        return True

    def run_string(self):
        print("===========================================================================================================")
        print("================================== RSA Encryptor / Decrypter ==============================================")
        print(" ")
        self.p = int(input(" - Enter a prime number (17, 19, 23, etc): "))
        self.q = int(
            input(" - Enter another prime number (Not one you entered above): "))
        print(" ")
        print("Generating your public/private keypairs now . . .")
        self.generate_key_pair(self.p, self.q)
        print("Your public key is ", self.public_key,
              " and your private key is ", self.private_key)
        print(" ")
        string = input("Enter a string to encrypt with your private key: ")
        encrypted_string = self.encrypt_string(string)
        print("Your encrypted string is: ")
        print(''.join(map(lambda x: str(x), encrypted_string)))
        print(" ")
        print("Decrypting string with public key ", self.public_key, " . . .")
        print("Your string is:")
        print(self.decrypt_string(encrypted_string))
        print(" ")
        print("===========================================================================================================")
        print("================================== RSA Encryptor / Decrypter ==============================================")
        print(" ")
        return True


if __name__ == '__main__':
    '''
    Detect if the script is being run directly by the user
    '''
    rsa = RSA()
    rsa.run()
    # rsa.run_file()
    # rsa.run_string()
    # rsa.test()
